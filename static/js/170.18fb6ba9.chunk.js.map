{"version":3,"file":"static/js/170.18fb6ba9.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/ContactsItem.jsx","components/Contacts/ContactsList.jsx","components/Contacts/Filter.jsx","redux/selectors.js","components/Contacts/FormData.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"phonebookWrapper\":\"Contacts_phonebookWrapper__aRncY\",\"labelWrapperName\":\"Contacts_labelWrapperName__b4GWX\",\"labelWrapperNumber\":\"Contacts_labelWrapperNumber__le986\",\"formLabelName\":\"Contacts_formLabelName__8Ip+8\",\"formLabelNumber\":\"Contacts_formLabelNumber__av-FT\",\"formInputName\":\"Contacts_formInputName__gjf5l\",\"formInputNumber\":\"Contacts_formInputNumber__ExwXy\",\"labelWrapper\":\"Contacts_labelWrapper__5tPoq\",\"btnSubmit\":\"Contacts_btnSubmit__N3Qnq\",\"btnDelete\":\"Contacts_btnDelete__j5p-J\",\"contactItem\":\"Contacts_contactItem__qm4r1\",\"contactName\":\"Contacts_contactName__xJ+2p\"};","import css from './Contacts.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contactsSlice/operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <li className={css.contactItem}>\n      <p className={css.contactName}>\n        📞{name}: {number}\n        <button className={css.btnDelete} onClick={handleDelete}>\n          Delete\n        </button>\n      </p>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { ContactItem } from './ContactsItem';\nimport PropTypes from 'prop-types';\n\nconst ContactsList = ({ items }) => {\n  return (\n    <ul>\n      {items.map(({ id, name, number }) => (\n        <ContactItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filterSlice/filterSlice';\n\nconst filterId = nanoid(5);\n\nexport const Filter = ({ filter }) => {\n  const dispatch = useDispatch();\n  const onChangeFilter = e => dispatch(changeFilter(e.target.value));\n\n  return (\n    <>\n      <label\n        style={{\n          marginRight: '10px',\n        }}\n        htmlFor={filterId}\n      >\n        Find contacts by name\n      </label>\n      <input\n        type=\"text\"\n        placeholder=\"🔍\"\n        id={filterId}\n        value={filter}\n        onChange={onChangeFilter}\n      />\n    </>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { nanoid } from 'nanoid';\nimport { Field, Form, Formik } from 'formik';\n// import { GiRotaryPhone } from 'react-icons/gi';\nimport { HiUserAdd } from 'react-icons/hi';\nimport css from './Contacts.module.css';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsSlice/operations';\nimport { selectContacts } from 'redux/selectors';\n\nconst schema = yup.object().shape({\n  name: yup.string().min(2, 'Too short').required(''),\n  number: yup.string().length(9, 'Format: xxx-xx-xx').required(''),\n});\n\nexport const FormData = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const nameInputId = nanoid(5);\n  const numberInputId = nanoid(5);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    for (const contact of contacts) {\n      if (contact.name.toLowerCase() === values.name.toLowerCase()) {\n        alert(`${values.name} is already in contacts`);\n        return;\n      }\n    }\n    dispatch(addContact(values));\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Form className={css.phonebookWrapper}>\n        <div className={css.labelWrapperName}>\n          {/* <HiUserCircle className={css.formIcon} /> */}\n\n          <Field\n            className={css.formInputName}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            id={nameInputId}\n            // placeholder=\"John Doe\"\n          />\n          <label className={css.formLabelName} htmlFor={nameInputId}>\n            Name\n          </label>\n          {/* <ErrorMessage name=\"name\" /> */}\n        </div>\n        <div className={css.labelWrapperNumber}>\n          {/* <GiRotaryPhone className={css.formIcon} /> */}\n\n          <Field\n            className={css.formInputNumber}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            id={numberInputId}\n            // placeholder=\"xxx-xx-xx\"\n          />\n          <label className={css.formLabelNumber} htmlFor={numberInputId}>\n            Number\n          </label>\n          {/* <ErrorMessage name=\"number\" /> */}\n        </div>\n        <button className={css.btnSubmit} type=\"submit\">\n          <HiUserAdd size={11} />\n          Add contact\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contactsSlice/operations';\nimport ContactsList from 'components/Contacts/ContactsList';\nimport { Filter } from 'components/Contacts/Filter';\nimport { selectIsLoading } from 'redux/selectors';\nimport {\n  selectContacts,\n  selectFilter,\n  selectVisibleContacts,\n} from 'redux/selectors';\nimport { FormData } from 'components/Contacts/FormData';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(selectContacts);\n\n  const filteredContacts = useSelector(selectFilter);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      {/* <Filter /> */}\n      <div>{isLoading && 'Request in progress...'}</div>\n      <FormData />\n      <h1\n        style={{\n          marginBottom: '10px',\n        }}\n      >\n        📃Contacts\n      </h1>\n      {contacts.length > 0 ? (\n        <>\n          <Filter filter={filteredContacts} />\n          <ContactsList items={visibleContacts} />\n        </>\n      ) : (\n        <p>There are no contacts</p>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactItem","id","name","number","dispatch","useDispatch","className","css","onClick","deleteContact","items","map","filterId","nanoid","Filter","filter","style","marginRight","htmlFor","type","placeholder","value","onChange","e","changeFilter","target","selectContacts","state","contacts","selectFilter","selectIsLoading","isLoading","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","includes","schema","yup","shape","min","required","length","FormData","useSelector","nameInputId","numberInputId","initialValues","onSubmit","values","resetForm","alert","addContact","validationSchema","pattern","title","size","useEffect","fetchContacts","filteredContacts","visibleContacts","Helmet","marginBottom"],"sourceRoot":""}